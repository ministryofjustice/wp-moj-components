<?php

/**
 * Created by PhpStorm.
 * User: damienwilson
 * Date: 2019-09-27
 * Time: 10:22
 */

namespace MOJComponents\Security;

use WP_Mock;

class VulnerabilityDBTest extends WP_Mock\Tools\TestCase
{
    public $vulnerability;

    public function setUp(): void
    {
        \WP_Mock::setUp();
        $this->vulnerability = new VulnerabilityDB();
    }

    public function tearDown(): void
    {
        \WP_Mock::tearDown();
        $this->vulnerability = null;
    }

    public function testActions()
    {
        \WP_Mock::expectActionAdded('moj_check_vulnerabilities', [$this->vulnerability, 'process']);

        $this->vulnerability->actions();

        parent::assertActionsCalled();
    }

    public function testScheduleCreate()
    {
        $time = time();

        \WP_Mock::userFunction('wp_next_scheduled', [
            'times' => 1,
            'args' => [
                'moj_check_vulnerabilities'
            ],
            'return' => false
        ]);

        \WP_Mock::userFunction('wp_schedule_event', [
            'times' => 1,
            'args' => [
                $time,
                'daily',
                'moj_check_vulnerabilities'
            ]
        ]);

        $result = $this->vulnerability->schedule();
        $this->assertTrue($result);
    }

    public function testScheduleSkip()
    {
        \WP_Mock::userFunction('wp_next_scheduled', [
            'times' => 1,
            'args' => [
                'moj_check_vulnerabilities'
            ],
            'return' => true
        ]);

        $result = $this->vulnerability->schedule();
        $this->assertNull($result);
    }

    public function testGet()
    {
        global $wp_version;
        $wp_version = '4.9.4';

        \WP_Mock::userFunction('get_option', [
            'times' => 1,
            'args' => 'moj_plugin_versions',
            'return' => [
                'classic-editor' => '2.0',
                'example-plugin-extreme' => '5.2.9'
            ]
        ]);

        \WP_Mock::userFunction('get_option', [
            'times' => 5,
            'args' => 'moj_component_settings',
            'return' => [
                'vulndb_token' => '123456789abcdefghijklmnop',
                'to_email' => 'me@example.com'
            ]
        ]);

        \WP_Mock::userFunction('get_option', [
            'times' => 1,
            'args' => 'blogname',
            'return' => 'My Test Website'
        ]);

        \WP_Mock::userFunction('get_option', [
            'times' => 1,
            'args' => [
                'moj_current_vuln_statuses',
                []
            ],
            'return' => []
        ]);

        \WP_Mock::userFunction('wp_remote_get', [
            'times' => 1,
            'args' => [
                'https://wpvulndb.com/api/v3/wordpresses/' . str_replace('.', '', $wp_version),
                [
                    'headers' => [
                        'Authorization' => 'Token token=123456789abcdefghijklmnop',
                    ]
                ]
            ],
            'return' => $this->wordpressesApiJson()
        ]);

        \WP_Mock::userFunction('wp_remote_retrieve_body', [
            'times' => 1,
            'args' => $this->wordpressesApiJson(),
            'return' => $this->wordpressesApiJson()
        ]);

        \WP_Mock::userFunction('wp_remote_retrieve_body', [
            'times' => 1,
            'args' => '{
                    "classic-editor": {
                        "friendly_name": "Classic Editor",
                        "latest_version": "2.2",
                        "last_updated": "2019-05-08T23:08:00.000Z", 
                        "popular": true,
                        "vulnerabilities": []
                    }
                }',
            'return' => $this->pluginsClassicApiJson()
        ]);

        \WP_Mock::userFunction('wp_remote_retrieve_body', [
            'times' => 1,
            'args' => '{
                    "example-plugin-extreme": {
                        "friendly_name": "Example Plugin Extreme",
                        "latest_version": "5.2.9",
                        "last_updated": "2019-05-08T23:08:00.000Z", 
                        "popular": true,
                        "vulnerabilities": []
                    }
                }',
            'return' => $this->pluginsExampleApiJson()
        ]);

        \WP_Mock::userFunction('wp_remote_get', [
            'times' => 1,
            'args' => [
                'https://wpvulndb.com/api/v3/plugins/classic-editor',
                [
                    'headers' => [
                        'Authorization' => 'Token token=123456789abcdefghijklmnop',
                    ]
                ]
            ],
            'return' => $this->pluginsClassicApiJson()
        ]);

        \WP_Mock::userFunction('wp_remote_get', [
            'times' => 1,
            'args' => [
                'https://wpvulndb.com/api/v3/plugins/example-plugin-extreme',
                $this->vulnerability->requestHeaders()
            ],
            'return' => $this->pluginsExampleApiJson()
        ]);

        \WP_Mock::userFunction('wp_mail', [
            'times' => 1
        ]);

        $result = $this->vulnerability->process();

        $this->assertTrue($result);
    }

    public function testRequestHeaders()
    {
        \WP_Mock::userFunction('get_option', [
            'times' => 1,
            'args' => 'moj_component_settings',
            'return' => [
                'vulndb_token' => '123456789abcdefghijklmnop',
                'to_email' => 'me@example.com'
            ]
        ]);

        $result = $this->vulnerability->requestHeaders();

        $this->assertIsArray($result);
        $this->assertArrayHasKey('headers', $result);
    }

    private function wordpressesApiJson()
    {
        return '{
                    "4.9.4": {
                        "status": "insecure",
                        "vulnerabilities": [
                            {
                                "id": 9021,
                                "title": "WordPress \u003c= 4.9.4 - Application Denial of Service (DoS) (unpatched)",
                                "created_at": "2018-02-05T16:50:40.000Z",
                                "updated_at": "2018-02-08T08:18:56.000Z",
                                "published_date": "2018-02-05T00:00:00.000Z",
                                "references": {
                                    "url": [
                                        "https://reference.com/one",
                                        "https://reference.com/two"
                                    ],
                                    "cve": []
                                },
                                "vuln_type": "DOS",
                                "fixed_in": null
                            }
                        ]
                    }
                }';
    }

    private function pluginsClassicApiJson($part = 'safe')
    {
        $json = [
            'safe' => '{
                    "classic-editor": {
                        "friendly_name": "Classic Editor",
                        "latest_version": "2.2",
                        "last_updated": "2019-05-08T23:08:00.000Z", 
                        "popular": true,
                        "vulnerabilities": []
                    }
                }',
            'insecure' => '{
                    "classic-editor": {
                        "friendly_name": "Classic Editor",
                        "latest_version": "2.2",
                        "last_updated": "2019-05-08T23:08:00.000Z", 
                        "popular": true,
                        "vulnerabilities": []
                    }
                }'
        ];

        return $json[$part];
    }

    private function pluginsExampleApiJson($part = 'safe')
    {
        $json = [
            'safe' => '{
                    "example-plugin-extreme": {
                        "friendly_name": "Example Plugin Extreme",
                        "latest_version": "5.2.9",
                        "last_updated": "2019-05-08T23:08:00.000Z", 
                        "popular": true,
                        "vulnerabilities": []
                    }
                }',
            'insecure' => '{
                    "classic-editor": {
                        "friendly_name": "Classic Editor",
                        "latest_version": "2.2",
                        "last_updated": "2019-05-08T23:08:00.000Z", 
                        "popular": true,
                        "vulnerabilities": []
                    }
                }'
        ];

        return $json[$part];
    }

    private function pluginsWpNestedPagesJson($part = 'insecure')
    {
        $json = [
            'insecure' => '{
                "wp-nested-pages": {
                    "friendly_name": "Nested Pages",
                    "latest_version": "3.1.7",
                    "last_updated": "2019-10-10T15:35:00.000Z",
                    "popular": true,
                    "vulnerabilities": [
                        {
                            "id": 9484,
                            "title": "Nested Pages <= 3.0.7 - Post Edit Bypass",
                            "created_at": "2019-07-31T08:08:59.000Z",
                            "updated_at": "2019-07-31T08:09:11.000Z",
                            "published_date": "2019-03-26T00:00:00.000Z",
                            "vuln_type": "BYPASS",
                            "references": {
                                "url": [
                                    "https://github.com/kylephillips/wp-nested-pages/issues/252"
                                ]
                            },
                            "fixed_in": "3.0.8"
                        }
                    ]
                  }
            }'
        ];

        return $json[$part];
    }
}
